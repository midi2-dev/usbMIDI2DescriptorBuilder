
function buildProtozoa(config){

    config.prefix = config.prefix || '';

    let midiCiProfilesInUse = config.functionBlocks.filter(fb=>fb.profiles?.length ).length;
    let midiCiPEInUse = config.functionBlocks.filter(fb=> fb.propertyExchange?.length).length;


    let out = [
        '// ProtoZoa Template generated by Protozoa Template builder',
        '// Please modify to match your needs',
        '',
        `#define DEVICE_MFRID 0x${config.manufacturerId.slice(2,4)},0x${config.manufacturerId.slice(4,6)},0x${config.manufacturerId.slice(6,8)}`,
        `#define DEVICE_FAMID 0x${config.familyId.slice(2,4)},0x${config.familyId.slice(4,6)}`,
        `#define DEVICE_MODELID 0x${config.modelId.slice(2,4)},0x${config.modelId.slice(4,6)}`,
        `#define DEVICE_VERSIONID 0x${config.version.slice(2,4)},0x${config.version.slice(4,6)},0x${config.version.slice(6,8)},0x${config.version.slice(8,10)}`,
        `#define DEVICE_ENDPOINTNAME "${config.endpointName}"`,
        `#define FUNCTIONBLOCK_LENGTH ${config.functionBlocks.length}`];


    out.push(    '',
        '#include "pico/unique_id.h"',
        '#include "include/interchip.h"',
        '#include <cmath>',
        '// MIDI 2.0 Handling',
        '#include "include/umpProcessor.h"',
        '#include "include/umpMessageCreate.h"',
        '#include "midi2Helper.h"'
    );

    if(midiCiProfilesInUse || midiCiPEInUse) {
        out.push(
            '#include "include/midiCIProcessor.h"',
            '#include "include/midiCIMessageCreate.h"'
        );
    }

    if(config.dinSupport){
        out.push(
            '#include "include/bytestreamToUMP.h"',
            '#include "include/umpToBytestream.h"'
        );
    }

    let notes = config.buttonNotes || [];
    notes.length = 7;
    notes = Array.from(notes, x => x === undefined ? 0 : x);

    out.push(
        '',
        '// USB MIDI interface',
        '#include "tusb.h"',
        '#include "ump_device.h"',
        '',
        'umpFunctionBlock fbs[FUNCTIONBLOCK_LENGTH];',
        '',
        'interchip mainPico;',
        'umpProcessor UMPHandler;',
        'uint32_t UMPpacket[4];',
        'uint32_t umpCount;',
        `uint8_t noteButtons[7] = {${notes.join(',')}};`,
       ''
    );

    if(config.dinSupport) {
        out.push(
            'bytestreamToUMP DIN2UMP;',
            'umpToBytestream UMPConvert;'
        );
    }


    out.push(
        ``,
        `void ${config.prefix}functionblock(uint8_t fbIdx, uint8_t filter);`,
    );

    if(midiCiProfilesInUse || midiCiPEInUse){
        out.push(
            `void ${config.prefix}processUMPSysex(struct umpData mess);`,
        );

    }
    if(config.scaffolding?.utility){
        out.push(`void ${config.prefix}utilityHandler(struct umpGeneric mess);`);
    }
    if(config.scaffolding?.system){
        out.push(`void ${config.prefix}systemMessagesHandler(struct umpGeneric mess);`);
    }
    if(config.scaffolding?.cvm){
        out.push(`void ${config.prefix}cvmHandler(struct umpCVM mess);`);
    }
    if(config.scaffolding?.flexdata){
        out.push(`void ${config.prefix}flexDataHandler(struct umpFlexData mess);`);
    }

    // if(midiCiProfilesInUse){
    //     out.push(
    //         `void ${config.prefix}handleProfileSpecificData(MIDICI ciDetails, std::array<uint8_t, 5> profile, uint16_t datalen, uint8_t*  data, uint16_t part, bool lastByteOfSet);`,
    //         `void ${config.prefix}handleProfileDetailsInquiry(MIDICI ciDetails, std::array<uint8_t, 5> profile,   uint8_t InquiryTarget);`,
    //     );
    //
    // }
    if(config.pot1 || config.pot2){
        out.push(
            `void ${config.prefix}analog(uint8_t pot, uint16_t value);`
        )
    }
    out.push(
        `void buttonDown(uint8_t button);`,
        `void buttonUp(uint8_t button);`
    )


    out.push(
        '',
        `int main() {`,
        `\tstdio_init_all();`,
        `\tprintf("Starting AmeNote ProtoZOA\\n");`,
        `\tmainPico.startup();`);

    if(config.pot1 || config.pot2){
        out.push(
            `\tmainPico.setAnalog(analog);`
        )
    }
    out.push(
        `\tmainPico.setButtonDown(buttonDown);`,
        `\tmainPico.setButtonUp(buttonUp);`
    )

    out.push(
        '',
        '\tmidiProtocol = 0x02;',
        '',
        '\t//Setup processing of UMP data recv to be handled by the following functions',
        `\tUMPHandler.setMidiEndpoint(midiendpoint);`,
        `\tUMPHandler.setFunctionBlock(${config.prefix}functionblock);`,
        `\tUMPHandler.setStreamConfigRequest(streamRequest);`
    );

    if(midiCiProfilesInUse || midiCiPEInUse){
        out.push(
            `\tUMPHandler.setSysEx(${config.prefix}processUMPSysex);`
        );
    }
    if(config.scaffolding?.utility){
        out.push(`\tUMPHandler.setUtility(${config.prefix}utilityHandler);`);
    }
    if(config.scaffolding?.system){
        out.push(`\tUMPHandler.setSystem(${config.prefix}systemMessagesHandler);`);
    }
    if(config.scaffolding?.cvm){
        out.push(`\tUMPHandler.setCVM(${config.prefix}cvmHandler);`);
    }
    if(config.scaffolding?.flexdata){
        out.push(`\tUMPHandler.setFlexDataGeneric(${config.prefix}flexDataHandler);`);
    }

    config.functionBlocks.map((f,idx)=>{
        let cisupport = 0 ;
        if(f.profiles?.length)cisupport += 0b100;
        if(f.propertyExchange?.length)cisupport += 0b1000;
        out.push(
            '',
            `\tfbs[${idx}].idx=${idx};`,
            `\tfbs[${idx}].groupStart=${f.firstGroup-1};`,
            `\tfbs[${idx}].numOfGroups=${f.numOfGroups};`,
            `\tfbs[${idx}].direction=${(f.in?1:0)+(f.out?2:0)};`,
            `\tfbs[${idx}].uiSender=${f.uihintIn?'true':'false'};`,
            `\tfbs[${idx}].uiReceiver=${f.uihintOut?'true':'false'};`,
            `\tfbs[${idx}].midi1Only=${f.isMIDI1?'true':'false'};`,
            `\tfbs[${idx}].name="${f.name}";`,
            `\tfbs[${idx}].midiCISupport=${cisupport};`,
            `\tfbs[${idx}].MUID=randomMuid();`,
        );
        if(f.profiles?.length){

            f.profiles.map((p,pidx)=>{
                let [,bank,id] = p.profileId.match(/^0x([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/);
                out.push(
                    `\tprofile pf_${idx}_${pidx};`,
                    `\tpf_${idx}_${pidx}.profileid[0] = 0x7E;`,
                    `\tpf_${idx}_${pidx}.profileid[1] = 0x${bank};`,
                    `\tpf_${idx}_${pidx}.profileid[2] = 0x${id};`,
                    `\tpf_${idx}_${pidx}.profileid[3] = ${p.level};`,
                    `\tpf_${idx}_${pidx}.profileid[4] = ${p.version};`,
                    `\tpf_${idx}_${pidx}.channel = ${p.channel-1};`,
                    `\tfbs[${idx}].profiles.push_back(pf_${idx}_${pidx});`
                );
            });
        }

        if(cisupport) {
            out.push(
                '',
                `\tfbs[${idx}].MIDICIHandler.refpoint = &fbs[${idx}];`,
                `\tfbs[${idx}].MIDICIHandler.setCheckMUID(checkMUIDCallback);`,
                `\tfbs[${idx}].MIDICIHandler.setRecvInvalidateMUID(invalidMUID);`,
                `\tfbs[${idx}].MIDICIHandler.setRecvDiscovery(recvDiscovery);`,
                `\tfbs[${idx}].MIDICIHandler.setRecvEndpointInfo(handleEndpointInfo);`
            );

            if(f.profiles?.length){
                out.push(
                    `\tfbs[${idx}].MIDICIHandler.setRecvProfileInquiry(handleProfileInquiry);`,
                    `\tfbs[${idx}].MIDICIHandler.setRecvProfileOn(handleProfileOn);`,
                    `\tfbs[${idx}].MIDICIHandler.setRecvProfileOff(handleProfileOff);`
                   // `\tfbs[${idx}].MIDICIHandler.setRecvProfileDetailsInquiry(${config.prefix}handleProfileDetailsInquiry);`,
                   // `\tfbs[${idx}].MIDICIHandler.setRecvProfileSpecificData(${config.prefix}handleProfileSpecificData);`,
                );
            }
        }
    })

    if(config.dinSupport) {
        out.push(
            '',
            '\t//---------- Setup MIDI Din Ports',
        '\t// Setup pio for receive',
        '\tpio_rx_init(pio, smRx);',
        '\t// Setup pio for transmit',
        '\tpio_tx_init(pio, smTx);',
        '\t//Set the UMP group of the output UMP message. By default, this is set to Group 1. Value is 0 based',
        `\tDIN2UMP.defaultGroup = ${config.dinSupport-1};`
        );
    }

    out.push(
        '',
        '\ttusb_init();',
        '',
        `\twhile (true) {`,
        `\t\ttud_task();`,
        `\t\tmainPico.process();`,
        '\t\t//Read USB MIDI\n' +
        '\t\tif (tud_ump_n_mounted(0)) {\n' +
        '\t\t\tif (tud_ump_n_available(0)) {\n' +
        '\t\t\t\tuint8_t mVersion = tud_alt_setting(0) +1 ;\n' +
        '\t\t\t\tif ((umpCount = tud_ump_read(0, UMPpacket, 4))) {\n' +
        '\t\t\t\t\tfor(uint32_t i=0; i< umpCount; i++){\n' +
        '\t\t\t\t\t\tUMPHandler.processUMP(UMPpacket[i]);');

    if(config.dinSupport) {
        out.push(
            '',
            '\t\t\t\t\t\tUMPConvert.UMPStreamParse(UMPpacket[i]);\n' +
            '\t\t\t\t\t\twhile (UMPConvert.availableBS()) {\n' +
            '\t\t\t\t\t\t\tuint8_t byte = UMPConvert.readBS();\n' +
            '\t\t\t\t\t\t\tif (UMPConvert.group == DIN2UMP.defaultGroup) {\n' +
            '\t\t\t\t\t\t\t\tuart_tx_program_putc(pio, smTx, byte);\n' +
            '\t\t\t\t\t\t\t}\n' +
            '\t\t\t\t\t\t}'
        );
    }

    out.push(
        '\t\t\t\t\t}\n' +
        '\t\t\t\t}\n' +
        '\t\t\t}\n' +
        '\t\t}\n'

    );
    if(config.dinSupport) {
        out.push(
            '\t\t//Read from DIN Port\n' +
            '\t\t//-------------------\n' +
            '\t\t if ( !pio_sm_is_rx_fifo_empty(pio, smRx) ) {\n' +
            '\t\t\t// Get a character from the buffer\n' +
            '\t\t\tuint8_t ch = uart_rx_program_getc(pio, smRx);\n' +
            '\t\t\tif(ch == 0xFE) continue; //Skip ActiveSense\n' +
            '\t\t\tDIN2UMP.bytestreamParse(ch);\n' +
            '\t\t\twhile(DIN2UMP.availableUMP()){\n' +
            '\t\t\t\tuint32_t ump = DIN2UMP.readUMP();\n' +
            '\t\t\t\t tud_ump_write(0,&ump,1);\n' +
            '\t\t\t}\n' +
            '\t\t}'
        );
    }
    out.push(
        '\t}\n',
        '\treturn 0;\n' +
        '}',
        ''
    );

    out.push(
        '',
        `void ${config.prefix}functionblock(uint8_t fbIdx, uint8_t filter){\n` +
        '\tif(fbIdx >= FUNCTIONBLOCK_LENGTH && fbIdx!=0xFF) return;\n' +
        '\tfor (int i=0; i< FUNCTIONBLOCK_LENGTH; i++) {\n' +
        '\t\tif(fbIdx==i || fbIdx==0xFF) {\n' +
        '\t\t\tif(filter & 0b1) {\n' +
        '\t\t\t\tstd::array<uint32_t, 4> UMP = UMPMessage::mtFFunctionBlockInfoNotify(\n' +
        '\t\t\t\t   i, fbs[i].active, fbs[i].direction, fbs[i].uiSender, fbs[i].uiReceiver,\n' +
        '\t\t\t\t   fbs[i].groupStart, fbs[i].numOfGroups, fbs[i].midiCISupport?1:0,\n' +
        '\t\t\t\t   fbs[i].midi1Only,fbs[i].maxS8Streams);\n' +
        '\t\t\t\ttud_ump_write(0,UMP.data(),4);\n' +
        '\t\t\t}\n' +
        '\n' +
        '\t\t\tif(filter & 0b10) {\n' +
        '\t\t\t\tuint8_t fbNameLength = fbs[i].name.length();\n' +
        '\t\t\t\tfor(uint8_t offset=0; offset<fbNameLength; offset+=13) {\n' +
        '\t\t\t\t\tstd::array<uint32_t, 4> UMP = UMPMessage::mtFFunctionBlockNameNotify(\n' +
        '\t\t\t\t\ti, offset, (uint8_t *) fbs[i].name.c_str(), fbNameLength);\n' +
        '\t\t\t\t\ttud_ump_write(0,UMP.data(),4);\n' +
        '\t\t\t\t}\n' +
        '\t\t\t}\n' +
        '\t\t}\n' +
        '\t}\n' +
        '}'
    );

    if(midiCiProfilesInUse || midiCiPEInUse){
        out.push(
            ``,
            `void ${config.prefix}processUMPSysex(struct umpData mess){\n` +
            '    //Processing UMP into MIDI-CI processor\n' +
            '    for (int i=0; i< FUNCTIONBLOCK_LENGTH; i++) {\n' +
            '        if (mess.umpGroup >= fbs[i].groupStart && mess.umpGroup < fbs[i].groupStart + fbs[i].numOfGroups) {\n' +
            '            if(mess.form==1 && mess.data[0] == S7UNIVERSAL_NRT && mess.data[2] == S7MIDICI) {\n' +
            '                fbs[i].MIDICIHandler.startSysex7(mess.umpGroup, mess.data[1]);\n' +
            '                fbs[i].isProcMIDICI = true;\n' +
            '            }\n' +
            '            for (int j = 0; j < mess.dataLength; j++) {\n' +
            '                if(mess.umpGroup==0 && fbs[i].isProcMIDICI){\n' +
            '                    fbs[i].MIDICIHandler.processMIDICI(mess.data[j]);\n' +
            '                }else{\n' +
            '                    //Process other SysEx\n' +
            '                }\n' +
            '            }\n' +
            '            if((mess.form==3 || mess.form==0) && fbs[i].isProcMIDICI){\n' +
            '                fbs[i].MIDICIHandler.endSysex7();\n' +
            '                fbs[i].isProcMIDICI = false;\n' +
            '            }\n' +
            '        }\n' +
            '    }\n' +
            '}',
            ''
        );

    }
    // if(midiCiProfilesInUse){
    //     out.push(
    //         '',
    //         'void handleProfileSpecificData(MIDICI ciDetails, std::array<uint8_t, 5> profile, uint16_t datalen, uint8_t*  data, uint16_t part, bool lastByteOfSet){}',
    //         'void handleProfileDetailsInquiry(MIDICI ciDetails, std::array<uint8_t, 5> profile,   uint8_t InquiryTarget){}'
    //     );
    // }

    if(config.scaffolding?.utility){
        out.push(`void ${config.prefix}utilityHandler(struct umpGeneric mess){}`);
    }
    if(config.scaffolding?.system){
        out.push(`void ${config.prefix}systemMessagesHandler(struct umpGeneric mess){}`);
    }
    if(config.scaffolding?.cvm){
        out.push(`void ${config.prefix}cvmHandler(struct umpCVM mess){}`);
    }
    if(config.scaffolding?.flexdata){
        out.push(`void ${config.prefix}flexDataHandler(struct umpFlexData mess){}`);
    }


    if(config.pot1 || config.pot2){
        out.push(
            '',
            `void analog(uint8_t pot, uint16_t value) {`
        );

        if(config.pot1) {
            out.push(
                '\tif(pot==POT1 && midiProtocol==1){'
            )
            switch (config.pot1.cvm) {
                case 'CC':
                    out.push(
                        `\t\tuint32_t ump = UMPMessage::mt2CC(${config.pot1.group - 1}, ${config.pot1.channel - 1}, ${config.pot1.index}, value >> 5);`,
                        `\t\tif(tud_ump_n_mounted(0))tud_ump_write(0, &ump, 1);`
                    );
                    break;
                case 'Pitch Bend':
                    out.push(
                        `\t\tuint32_t bVal = M2Utils::scaleUp((uint32_t) value, 12, 14);`,
                        `\t\tuint32_t ump = UMPMessage::mt2PitchBend(${config.pot1.group - 1}, ${config.pot1.channel - 1}, ${config.pot1.index}, (uint16_t)bVal);`,
                        `\t\tif(tud_ump_n_mounted(0))tud_ump_write(0, &ump, 1);`
                    );
                    break;
                case 'Registered Controller':
                    out.push(
                        `\t\tuint32_t bVal = M2Utils::scaleUp((uint32_t) value, 12, 14);`,
                        `\t\tuint32_t ump = UMPMessage::mt2CC(${config.pot1.group - 1}, ${config.pot1.channel - 1}
                            , 101, ${config.pot1.bank});`,
                        `\t\tif(tud_ump_n_mounted(0))tud_ump_write(0, &ump, 1);`,
                        `\t\tump = UMPMessage::mt2CC(${config.pot1.group - 1}, ${config.pot1.channel - 1}
                           , 100, ${config.pot1.index});`,
                        `\t\tif(tud_ump_n_mounted(0))tud_ump_write(0, &ump, 1);`,
                        `\t\tump = UMPMessage::mt2CC(${config.pot1.group - 1}, ${config.pot1.channel - 1}
                           , 6 , (uint8_t)(bVal >> 7));`,
                        `\t\tif(tud_ump_n_mounted(0))tud_ump_write(0, &ump, 1);`,
                        `\t\tump = UMPMessage::mt2CC(${config.pot1.group - 1}, ${config.pot1.channel - 1}
                           , 38 , (uint8_t)(bVal & 0x7F));`,
                        `\t\tif(tud_ump_n_mounted(0))tud_ump_write(0, &ump, 1);`,
                    );
                    break;
                case 'Assignable Controller':
                    out.push(
                        `\t\tuint32_t bVal = M2Utils::scaleUp((uint32_t) value, 12, 14);`,
                        `\t\tuint32_t ump = UMPMessage::mt2CC(${config.pot1.group - 1}, ${config.pot1.channel - 1}
                            , 99, ${config.pot1.bank});`,
                        `\t\tif(tud_ump_n_mounted(0))tud_ump_write(0, &ump, 1);`,
                        `\t\tump = UMPMessage::mt2CC(${config.pot1.group - 1}, ${config.pot1.channel - 1}
                           , 98, ${config.pot1.index});`,
                        `\t\tif(tud_ump_n_mounted(0))tud_ump_write(0, &ump, 1);`,
                        `\t\tump = UMPMessage::mt2CC(${config.pot1.group - 1}, ${config.pot1.channel - 1}
                           , 6 , (uint8_t)(bVal >> 7));`,
                        `\t\tif(tud_ump_n_mounted(0))tud_ump_write(0, &ump, 1);`,
                        `\t\tump = UMPMessage::mt2CC(${config.pot1.group - 1}, ${config.pot1.channel - 1}
                           , 38 , (uint8_t)(bVal & 0x7F));`,
                        `\t\tif(tud_ump_n_mounted(0))tud_ump_write(0, &ump, 1);`,
                    );
                    break;
            }
            out.push('\t}','');

            out.push(
                '\tif(pot==POT1 && midiProtocol==2){',
                `\t\tuint32_t bVal = M2Utils::scaleUp((uint32_t) value, 12, 32);`,
            )
            switch (config.pot1.cvm) {
                case 'CC':
                    out.push(
                        `\t\tstd::array<uint32_t, 2>ump2 = UMPMessage::mt4CC(${config.pot1.group - 1}, ${config.pot1.channel - 1}, ${config.pot1.index}, bVal);`,
                        `\t\tif(tud_ump_n_mounted(0))tud_ump_write(0, ump2.data(), 2);`
                    );
                    break;
                case 'Pitch Bend':
                    out.push(
                        `\t\tstd::array<uint32_t, 2>ump2 = UMPMessage::mt4PitchBend(${config.pot1.group - 1}, ${config.pot1.channel - 1}, bVal);`,
                        `\t\tif(tud_ump_n_mounted(0))tud_ump_write(0, ump2.data(), 2);`
                    );
                    break;
                case 'Registered Controller':
                    out.push(
                        `\t\tstd::array<uint32_t, 2>ump2 = UMPMessage::mt4RPN(${config.pot1.group - 1}, ${config.pot1.channel - 1}, ${config.pot1.bank},${config.pot1.index}, bVal);`,
                        `\t\tif(tud_ump_n_mounted(0))tud_ump_write(0, ump2.data(), 2);`
                    );
                    break;
                case 'Assignable Controller':
                    out.push(
                        `\t\tstd::array<uint32_t, 2>ump2 = UMPMessage::mt4NRPN(${config.pot1.group - 1}, ${config.pot1.channel - 1}, ${config.pot1.bank},${config.pot1.index}, bVal);`,
                        `\t\tif(tud_ump_n_mounted(0))tud_ump_write(0, ump2.data(), 2);`
                    );
                    break;
            }
            out.push('\t}','')

        }

        if(config.pot2) {
            out.push(
                '\tif(pot==POT2 && midiProtocol==1){'
            )
            switch (config.pot2.cvm) {
                case 'CC':
                    out.push(
                        `\t\tuint32_t ump = UMPMessage::mt2CC(${config.pot2.group - 1}, ${config.pot2.channel - 1}, ${config.pot2.index}, value >> 5);`,
                        `\t\tif(tud_ump_n_mounted(0))tud_ump_write(0, &ump, 1);`
                    );
                    break;
                case 'Pitch Bend':
                    out.push(
                        `\t\tuint32_t bVal = M2Utils::scaleUp((uint32_t) value, 12, 14);`,
                        `\t\tuint32_t ump = UMPMessage::mt2PitchBend(${config.pot2.group - 1}, ${config.pot2.channel - 1}, ${config.pot2.index}, (uint16_t)bVal);`,
                        `\t\tif(tud_ump_n_mounted(0))tud_ump_write(0, &ump, 1);`
                    );
                    break;
                case 'Registered Controller':
                    out.push(
                        `\t\tuint32_t bVal = M2Utils::scaleUp((uint32_t) value, 12, 14);`,
                        `\t\tuint32_t ump = UMPMessage::mt2CC(${config.pot2.group - 1}, ${config.pot2.channel - 1}
                            , 101, ${config.pot2.bank});`,
                        `\t\tif(tud_ump_n_mounted(0))tud_ump_write(0, &ump, 1);`,
                        `\t\tump = UMPMessage::mt2CC(${config.pot2.group - 1}, ${config.pot2.channel - 1}
                           , 100, ${config.pot2.index});`,
                        `\t\tif(tud_ump_n_mounted(0))tud_ump_write(0, &ump, 1);`,
                        `\t\tump = UMPMessage::mt2CC(${config.pot2.group - 1}, ${config.pot2.channel - 1}
                           , 6 , (uint8_t)(bVal >> 7));`,
                        `\t\tif(tud_ump_n_mounted(0))tud_ump_write(0, &ump, 1);`,
                        `\t\tump = UMPMessage::mt2CC(${config.pot2.group - 1}, ${config.pot2.channel - 1}
                           , 38 , (uint8_t)(bVal & 0x7F));`,
                        `\t\tif(tud_ump_n_mounted(0))tud_ump_write(0, &ump, 1);`,
                    );
                    break;
                case 'Assignable Controller':
                    out.push(
                        `\t\tuint32_t bVal = M2Utils::scaleUp((uint32_t) value, 12, 14);`,
                        `\t\tuint32_t ump = UMPMessage::mt2CC(${config.pot2.group - 1}, ${config.pot2.channel - 1}
                            , 99, ${config.pot2.bank});`,
                        `\t\tif(tud_ump_n_mounted(0))tud_ump_write(0, &ump, 1);`,
                        `\t\tump = UMPMessage::mt2CC(${config.pot2.group - 1}, ${config.pot2.channel - 1}
                           , 98, ${config.pot2.index});`,
                        `\t\tif(tud_ump_n_mounted(0))tud_ump_write(0, &ump, 1);`,
                        `\t\tump = UMPMessage::mt2CC(${config.pot2.group - 1}, ${config.pot2.channel - 1}
                           , 6 , (uint8_t)(bVal >> 7));`,
                        `\t\tif(tud_ump_n_mounted(0))tud_ump_write(0, &ump, 1);`,
                        `\t\tump = UMPMessage::mt2CC(${config.pot2.group - 1}, ${config.pot2.channel - 1}
                           , 38 , (uint8_t)(bVal & 0x7F));`,
                        `\t\tif(tud_ump_n_mounted(0))tud_ump_write(0, &ump, 1);`,
                    );
                    break;
            }
            out.push('\t}','');

            out.push(
                '\tif(pot==POT2 && midiProtocol==2){',
                `\t\tuint32_t bVal = M2Utils::scaleUp((uint32_t) value, 12, 32);`,
            )
            switch (config.pot2.cvm) {
                case 'CC':
                    out.push(
                        `\t\tstd::array<uint32_t, 2>ump2 = UMPMessage::mt4CC(${config.pot2.group - 1}, ${config.pot2.channel - 1}, ${config.pot2.index}, bVal);`,
                        `\t\tif(tud_ump_n_mounted(0))tud_ump_write(0, ump2.data(), 2);`
                    );
                    break;
                case 'Pitch Bend':
                    out.push(
                        `\t\tstd::array<uint32_t, 2>ump2 = UMPMessage::mt4PitchBend(${config.pot2.group - 1}, ${config.pot2.channel - 1}, bVal);`,
                        `\t\tif(tud_ump_n_mounted(0))tud_ump_write(0, ump2.data(), 2);`
                    );
                    break;
                case 'Registered Controller':
                    out.push(
                        `\t\tstd::array<uint32_t, 2>ump2 = UMPMessage::mt4RPN(${config.pot2.group - 1}, ${config.pot2.channel - 1}, ${config.pot2.bank},${config.pot2.index}, bVal);`,
                        `\t\tif(tud_ump_n_mounted(0))tud_ump_write(0, ump2.data(), 2);`
                    );
                    break;
                case 'Assignable Controller':
                    out.push(
                        `\t\tstd::array<uint32_t, 2>ump2 = UMPMessage::mt4NRPN(${config.pot2.group - 1}, ${config.pot2.channel - 1}, ${config.pot2.bank},${config.pot2.index}, bVal);`,
                        `\t\tif(tud_ump_n_mounted(0))tud_ump_write(0, ump2.data(), 2);`
                    );
                    break;
            }
            out.push('\t}')

        }

        out.push('}','')
    }

    out.push(
        '',
        'void buttonDown(uint8_t button) {\n' +
        '\tif(midiProtocol==1){\n' +
        '\t\tuint32_t ump = UMPMessage::mt2NoteOn(0, 0, noteButtons[button], 127);\n' +
        '\t\tif(tud_ump_n_mounted(0))tud_ump_write(0, &ump, 1);\n' +
        '\t}else {\n' +
        '\t\tstd::array<uint32_t, 2> UMP = UMPMessage::mt4NoteOn(0, 0, noteButtons[button], 0xFFFF, 0, 0);\n' +
        '\t\ttud_ump_write(0, UMP.data(), 2);\n' +
        '\t}\n' +
        '}\n' +
        '\n' +
        'void buttonUp(uint8_t button) {\n' +
        '\tif(midiProtocol==1){\n' +
        '\t\tuint32_t ump = UMPMessage::mt2NoteOff(0, 0, noteButtons[button], 0);\n' +
        '\t\tif(tud_ump_n_mounted(0))tud_ump_write(0, &ump, 1);\n' +
        '\t}else {\n' +
        '\t\tstd::array<uint32_t, 2> UMP = UMPMessage::mt4NoteOff(0, 0, noteButtons[button], 0, 0, 0);\n' +
        '\t\ttud_ump_write(0, UMP.data(), 2);\n' +
        '\t}\n' +
        '}'
        )

    return out.join("\n");

}






